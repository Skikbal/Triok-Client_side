import React, { useEffect, useRef, useState } from "react";
import { smartPlanOptions } from "../../../utils/options";
import { handleDropdownClose } from "../../../utils/utils";
import { IoIosArrowDown as ArrowDown } from "react-icons/io";

const EmailIcon = () => {
  return (
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="40" height="40" rx="20" fill="#D1DBCF" />
      <path d="M27 12H13C12.2044 12 11.4413 12.3161 10.8787 12.8787C10.3161 13.4413 10 14.2044 10 15V25C10 25.7956 10.3161 26.5587 10.8787 27.1213C11.4413 27.6839 12.2044 28 13 28H27C27.7956 28 28.5587 27.6839 29.1213 27.1213C29.6839 26.5587 30 25.7956 30 25V15C30 14.2044 29.6839 13.4413 29.1213 12.8787C28.5587 12.3161 27.7956 12 27 12ZM26.59 14L20.71 19.88C20.617 19.9737 20.5064 20.0481 20.3846 20.0989C20.2627 20.1497 20.132 20.1758 20 20.1758C19.868 20.1758 19.7373 20.1497 19.6154 20.0989C19.4936 20.0481 19.383 19.9737 19.29 19.88L13.41 14H26.59ZM28 25C28 25.2652 27.8946 25.5196 27.7071 25.7071C27.5196 25.8946 27.2652 26 27 26H13C12.7348 26 12.4804 25.8946 12.2929 25.7071C12.1054 25.5196 12 25.2652 12 25V15.41L17.88 21.29C18.4425 21.8518 19.205 22.1674 20 22.1674C20.795 22.1674 21.5575 21.8518 22.12 21.29L28 15.41V25Z" fill="#2D5B30" />
    </svg>
  );
};

const TaskIcon = () => {
  return (
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="40" height="40" rx="20" fill="#D1DBCF" />
      <g clipPath="url(#clip0_1169_10669)">
        <path d="M27 12H13C12.4477 12 12 12.4477 12 13V15C12 15.5523 12.4477 16 13 16H27C27.5523 16 28 15.5523 28 15V13C28 12.4477 27.5523 12 27 12Z" stroke="#2D5B30" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
        <path d="M17 20H13C12.4477 20 12 20.4477 12 21V27C12 27.5523 12.4477 28 13 28H17C17.5523 28 18 27.5523 18 27V21C18 20.4477 17.5523 20 17 20Z" stroke="#2D5B30" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
        <path d="M22 20H28" stroke="#2D5B30" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
        <path d="M22 24H28" stroke="#2D5B30" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
        <path d="M22 28H28" stroke="#2D5B30" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      </g>
      <defs>
        <clipPath id="clip0_1169_10669">
          <rect width="24" height="24" fill="white" transform="translate(8 8)" />
        </clipPath>
      </defs>
    </svg>
  );
};

const SendMessageIcon = () => {
  return (
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="40" height="40" rx="20" fill="#D1DBCF" />
      <path d="M15.9999 19C15.8021 19 15.6087 19.0586 15.4443 19.1685C15.2798 19.2784 15.1517 19.4346 15.076 19.6173C15.0003 19.8 14.9805 20.0011 15.0191 20.1951C15.0577 20.3891 15.1529 20.5673 15.2928 20.7071C15.4326 20.847 15.6108 20.9422 15.8048 20.9808C15.9988 21.0194 16.1998 20.9996 16.3825 20.9239C16.5653 20.8482 16.7215 20.72 16.8313 20.5556C16.9412 20.3911 16.9999 20.1978 16.9999 20C16.9999 19.7348 16.8945 19.4804 16.707 19.2929C16.5194 19.1054 16.2651 19 15.9999 19ZM19.9999 19C19.8021 19 19.6087 19.0586 19.4443 19.1685C19.2798 19.2784 19.1517 19.4346 19.076 19.6173C19.0003 19.8 18.9805 20.0011 19.0191 20.1951C19.0577 20.3891 19.1529 20.5673 19.2928 20.7071C19.4326 20.847 19.6108 20.9422 19.8048 20.9808C19.9988 21.0194 20.1998 20.9996 20.3826 20.9239C20.5653 20.8482 20.7215 20.72 20.8313 20.5556C20.9412 20.3911 20.9999 20.1978 20.9999 20C20.9999 19.7348 20.8945 19.4804 20.707 19.2929C20.5194 19.1054 20.2651 19 19.9999 19ZM23.9999 19C23.8021 19 23.6087 19.0586 23.4443 19.1685C23.2798 19.2784 23.1517 19.4346 23.076 19.6173C23.0003 19.8 22.9805 20.0011 23.0191 20.1951C23.0577 20.3891 23.1529 20.5673 23.2928 20.7071C23.4326 20.847 23.6108 20.9422 23.8048 20.9808C23.9988 21.0194 24.1998 20.9996 24.3825 20.9239C24.5653 20.8482 24.7215 20.72 24.8313 20.5556C24.9412 20.3911 24.9999 20.1978 24.9999 20C24.9999 19.7348 24.8945 19.4804 24.707 19.2929C24.5194 19.1054 24.2651 19 23.9999 19ZM19.9999 10C18.6866 10 17.3863 10.2587 16.173 10.7612C14.9598 11.2638 13.8574 12.0003 12.9288 12.9289C11.0534 14.8043 9.99987 17.3478 9.99987 20C9.99112 22.3091 10.7907 24.5485 12.2599 26.33L10.2599 28.33C10.1211 28.4706 10.0271 28.6492 9.98974 28.8432C9.95236 29.0372 9.97329 29.2379 10.0499 29.42C10.1329 29.5999 10.2676 29.7511 10.4367 29.8544C10.6059 29.9577 10.8019 30.0083 10.9999 30H19.9999C22.652 30 25.1956 28.9464 27.0709 27.0711C28.9463 25.1957 29.9999 22.6522 29.9999 20C29.9999 17.3478 28.9463 14.8043 27.0709 12.9289C25.1956 11.0536 22.652 10 19.9999 10ZM19.9999 28H13.4099L14.3399 27.07C14.5261 26.8826 14.6307 26.6292 14.6307 26.365C14.6307 26.1008 14.5261 25.8474 14.3399 25.66C13.0305 24.352 12.215 22.6305 12.0326 20.7888C11.8501 18.947 12.3118 17.099 13.3391 15.5595C14.3664 14.02 15.8957 12.8844 17.6664 12.346C19.4371 11.8076 21.3397 11.8998 23.0501 12.6069C24.7604 13.314 26.1727 14.5923 27.0463 16.2239C27.9199 17.8555 28.2007 19.7395 27.841 21.555C27.4813 23.3705 26.5032 25.005 25.0734 26.1802C23.6436 27.3554 21.8506 27.9985 19.9999 28Z" fill="#2D5B30" />
    </svg>
  );
};

const RainMakerIcon = () => {
  return (
    <svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="40" height="40" rx="20" fill="#D1DBCF" />
      <path d="M23.7105 20.7096C24.6909 19.9383 25.4065 18.8806 25.7577 17.6836C26.109 16.4866 26.0784 15.2099 25.6703 14.0311C25.2621 12.8523 24.4967 11.83 23.4806 11.1065C22.4644 10.383 21.2479 9.99414 20.0005 9.99414C18.753 9.99414 17.5366 10.383 16.5204 11.1065C15.5042 11.83 14.7388 12.8523 14.3307 14.0311C13.9226 15.2099 13.892 16.4866 14.2432 17.6836C14.5945 18.8806 15.3101 19.9383 16.2905 20.7096C14.6106 21.3827 13.1448 22.499 12.0494 23.9396C10.954 25.3801 10.27 27.0909 10.0705 28.8896C10.056 29.021 10.0676 29.1538 10.1045 29.2807C10.1414 29.4075 10.203 29.5259 10.2856 29.629C10.4525 29.8371 10.6953 29.9705 10.9605 29.9996C11.2257 30.0288 11.4916 29.9514 11.6998 29.7845C11.908 29.6176 12.0413 29.3749 12.0705 29.1096C12.2901 27.1548 13.2222 25.3494 14.6887 24.0384C16.1552 22.7274 18.0534 22.0027 20.0205 22.0027C21.9876 22.0027 23.8857 22.7274 25.3523 24.0384C26.8188 25.3494 27.7509 27.1548 27.9705 29.1096C27.9977 29.3554 28.1149 29.5823 28.2996 29.7467C28.4843 29.911 28.7233 30.0011 28.9705 29.9996H29.0805C29.3426 29.9695 29.5822 29.8369 29.747 29.6309C29.9119 29.4248 29.9886 29.162 29.9605 28.8996C29.76 27.0958 29.0724 25.3806 27.9713 23.9378C26.8703 22.4951 25.3974 21.3791 23.7105 20.7096ZM20.0005 19.9996C19.2094 19.9996 18.436 19.765 17.7782 19.3255C17.1204 18.886 16.6077 18.2613 16.305 17.5304C16.0022 16.7995 15.923 15.9952 16.0773 15.2193C16.2317 14.4434 16.6126 13.7306 17.1721 13.1712C17.7315 12.6118 18.4442 12.2308 19.2201 12.0765C19.996 11.9222 20.8003 12.0014 21.5312 12.3041C22.2621 12.6069 22.8868 13.1196 23.3264 13.7774C23.7659 14.4352 24.0005 15.2085 24.0005 15.9996C24.0005 17.0605 23.5791 18.0779 22.8289 18.8281C22.0788 19.5782 21.0614 19.9996 20.0005 19.9996Z" fill="#2D5B30" />
    </svg>
  );
};

const DesignatedDropdown = ({ title, desc, icon, selectedOption, onSetSelectOption, options }) => {
  const dropdownRef = useRef(null);
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    const handleClose = () => {
      setIsOpen(false);
    };
    handleDropdownClose(dropdownRef, handleClose);
  }, []);

  return (
    <div>
      <div className="flex gap-3">
        {icon === "email" ? <EmailIcon /> : icon === "task" ? <TaskIcon /> : icon === "message" ? <SendMessageIcon /> : <RainMakerIcon />}
        <div>
          <p className="head-4 dark-H">{title}</p>
          <p className="body-S">{desc}</p>
        </div>
      </div>
      <div ref={dropdownRef} className="custom-dropdown mt-4">
        <div role="button" className="select-header-input capitalize light-bg-L body-N dark-H flex justify-between items-center" onClick={() => setIsOpen(!isOpen)}>
          {selectedOption === "" ? "Select" : <div className="flex items-center">{options?.find((el) => el.value === Number(selectedOption))?.label}</div>}
          <ArrowDown />
        </div>

        {isOpen && (
          <div className="dropdown-list-container light-bg-L dark-M body-N shadow rounded-box max-h-[37vh] overflow-y-auto" style={{ width: "100%" }}>
            <ul className="dropdown-list">
              {options?.flatMap((el, i) => (
                <li
                  key={i}
                  role="button"
                  onClick={() => {
                    onSetSelectOption(el.value);
                    setIsOpen(false);
                  }}
                  className={`body-N dark-H capitalize ${smartPlanOptions === el?.value ? "active" : ""}`}
                >
                  {el?.label}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default DesignatedDropdown;
